plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.sookmyung'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly 'com.h2database:h2'

	// FIXED: springdoc 의존성 충돌 해결 - Spring Boot 3.5.x 호환 버전으로 업데이트
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
}

// FIXED: 의존성 충돌 해결을 위한 해결 전략 추가
configurations.all {
	resolutionStrategy.eachDependency { details ->
		// Spring Framework 버전을 Boot가 관리하는 버전으로 강제
		if (details.requested.group == 'org.springframework' && 
			details.requested.name.startsWith('spring-')) {
			details.useVersion('6.2.9')
		}
		// springdoc 관련 의존성에서 가져오는 구버전 spring-webmvc 제외
		if (details.requested.group == 'org.springdoc' && 
			details.requested.name.contains('springdoc-openapi-starter-common')) {
			details.because 'Spring Boot 3.5.x와 호환되는 버전 사용'
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
	systemProperty "spring.profiles.active", "test"
	// test는 기본적으로 compileTestJava에 의존하므로 명시적 dependsOn 불필요
}

// build는 기본 수명주기(assemble, check)만 사용
// test는 check를 통해 자동으로 포함되므로 별도 finalizedBy 불필요

// bootRun 태스크 설정 추가
bootRun {
    // 기본 프로필을 local로 설정
    systemProperty "spring.profiles.active", "local"
    
    // JVM 옵션 설정
    jvmArgs = [
        "-Dfile.encoding=UTF-8",
        "-Duser.timezone=Asia/Seoul"
    ]
}

// local 프로필용 bootRun 태스크 추가
task bootRunLocal(type: org.springframework.boot.gradle.tasks.run.BootRun) {
    group = 'application'
    description = 'Run the Spring Boot application with local profile'
    
    systemProperty "spring.profiles.active", "local"
    jvmArgs = [
        "-Dfile.encoding=UTF-8",
        "-Duser.timezone=Asia/Seoul"
    ]
}

// dev 프로필용 bootRun 태스크 추가
task bootRunDev(type: org.springframework.boot.gradle.tasks.run.BootRun) {
    group = 'application'
    description = 'Run the Spring Boot application with dev profile'
    
    systemProperty "spring.profiles.active", "dev"
    jvmArgs = [
        "-Dfile.encoding=UTF-8",
        "-Duser.timezone=Asia/Seoul"
    ]
}
